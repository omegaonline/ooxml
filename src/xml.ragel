///////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2011 Rick Taylor
//
// This file is part of OOXML, the Omega Online XML library.
//
// OOXML is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OOXML is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with OOXML.  If not, see <http://www.gnu.org/licenses/>.
//
///////////////////////////////////////////////////////////////////////////////////

#define TOKEN(n) set_token(pe,Tokenizer::n);

%%{
	machine xml;
	access this->m_;
	alphtype unsigned char;
	
	prepush { pre_push(); }
	
	action return { fret; }
	action append { m_token.push(m_char); }
	action entity { m_entity.push(m_char); }
	action entity_name { m_entity_name.push(m_char); }
	
	# UTF-8 validation
	utf8_cont = 0x80..0xBF;
    utf8_one_byte = 0x00..0x7F;
    utf8_two_byte_basic      = (0xC0..0xDF) utf8_cont;
    utf8_two_byte_overlong   = (0xC0..0xC1) utf8_cont;
    utf8_two_byte            = utf8_two_byte_basic - utf8_two_byte_overlong;
    utf8_three_byte_basic    = (0xE0..0xEF) utf8_cont{2};
    utf8_three_byte_overlong = 0xE0 (0x80..0x9F) utf8_cont;
    utf8_three_byte_reserved = 0xED (0xA0..0xBF) utf8_cont;  # U+D800 to U+DFFF
    utf8_three_byte          = utf8_three_byte_basic - utf8_three_byte_overlong - utf8_three_byte_reserved;
    utf8_four_byte_basic     = (0xF0..0xF4) utf8_cont{3};
    utf8_four_byte_overlong  = 0xF0 (0x80..0x8F) utf8_cont{2};
    utf8_four_byte_reserved  = 0xF4 (0x90..0xBF) utf8_cont{2};    # > U+10FFFF
    utf8_four_byte           = utf8_four_byte_basic - utf8_four_byte_overlong - utf8_four_byte_reserved;
    utf8_char                = (utf8_one_byte | utf8_two_byte | utf8_three_byte | utf8_four_byte);
	
	Char_v0_extra =    0x7F | 0xC2 (0x80..0x84) | 0xC2 (0x86..0x9F);
	Char_v1       =    utf8_char - ((0x00..0x08) | 0x0B | 0x0C | (0x0E..0x1F) | 0x7F | 0xC2 (0x80..0x84) | 0xC2 (0x86..0x9F) | (0xEF 0xBF 0xBE) | (0xEF 0xBF 0xBF));
		
	Char          =    Char_v1 | (Char_v0_extra when {get_version()!=1});
	                   
	S             =    (0x20 | 0x9 | 0xD | 0xA)+;
	Eq            =    S? '=' S?;
			
	Comment       =    '<!--' @{fcall Comment_i;};
	Comment_i    :=    ((Char - '-') | ('-' (Char - '-')))* $append '-->' @{set_token(pe,Tokenizer::Comment,1);fret;};
		
	NameStartChar =    [a-zA-Z:_]
	                   | 0xC3 (utf8_cont - (0x97 | 0xB7))                          # [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#xFF]
	                   | (0xC4..0xCB) utf8_cont                                    # [#x100-#x2FF]
	                   | 0xCD (0xB0..0xBD | 0xBF)                                  # [#x370-#x37D]
	                   | (0xCE..0xDF) utf8_cont                                    # [#x37F-#x7FF]
	                   | (((0xE0..0xE1) utf8_cont{2} ) - utf8_three_byte_overlong) # [#x800-#x1FFF]
	                   | 0xE2 0x80 (0x8C | 0x8D)                                   # [#x200C-#x200D]
	                   | 0xE2 (0x81 (0xB0..0xBF) | (0x82..0x85) utf8_cont | 0x86 (0x80..0x8F)) # [#x2070-#x218F]
	                   | 0xE2 ((0xB0..0xBE) utf8_cont | 0xBF (0x80..0xAF))         # [#x2C00-#x2FEF]
	                   | 0xE3 (0x80 (0x81..0xBF) | (0x81..0xBF) utf8_cont)         # [#x3001-#x3FFF]
	                   | (0xE4..0xEC) utf8_cont{2} | 0xED (0x80..0x9F) utf8_cont   # [#x4000-#xD7FF]
	                   | 0xEF ((0xA4..0xB6) utf8_cont | 0xB7 (0x80..0x87))         # [#xF900-#xFDCF]
	                   | 0xEF (0xB7 (0xB0..0xBF) | (0xB8..0xBF) utf8_cont)         # [#xFDF0-#xFFFD]
	                   | (utf8_four_byte - ((0xF3 (0xB0..0xBF) | 0xF4 utf8_cont) utf8_cont{2})); # [#x10000-#xEFFFF]
	 
	NameChar      =    NameStartChar | "-" | "." | [0-9]
	                   | 0xC2 0xB7                          #  #xB7
	                   | 0xCC utf8_cont | 0xCD (0x80..0xAF) # [#x0300-#x036F]
	                   | 0xE2 (0x80 0xBF | 0x81 0x80);      # [#x203F-#x2040]
		  
	Name          =    NameStartChar (NameChar)*;
	NCName        =    (Name -- ':');
	
	LocalPart     =    NCName;
	Prefix        =    NCName - 'xmlns';
	UnprefixedName =   LocalPart;
	PrefixedName  =    Prefix ':' LocalPart;
	QName         =    PrefixedName | UnprefixedName;
	
	PrefixedAttName =  'xmlns:' (NCName - 'xmlns');
	DefaultAttName =   'xmlns';
	NSAttName     =    PrefixedAttName | DefaultAttName;
	
	PITarget      =    NCName - (('X' | 'x') ('M' | 'm') ('L' | 'l'));
	PI            =    '<?' PITarget $append (S (Char* -- '?>') $append )? '?>' @{set_token(pe,Tokenizer::PiData,1);};
			
	Misc          =    Comment | PI | S;
	
	SystemLiteral =    ('"' (Char - '"')* ${m_system.push(m_char);} '"') | ("'" (Char - "'")* ${m_system.push(m_char);} "'");
	PubidChar     =    0x20 | 0xD | 0xA | [a-zA-Z0-9] | '-' | ['()+,./:=?;!*#@$_%];
	PubidLiteral  =    '"' PubidChar* ${m_public.push(m_char);} '"' | "'" (PubidChar - "'")* ${m_public.push(m_char);} "'";
	ExternalID    =    'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral;
	StringType    =    'CDATA';
	TokenizedType =    'ID' | 'IDREF' | 'IDREFS' | 'ENTITY' | 'ENTITIES' | 'NMTOKEN' | 'NMTOKENS';
	NotationType  =    'NOTATION' S '(' S? NCName (S? '|' S? NCName)* S? ')';
	Nmtoken       =    (NameChar)+;
	Enumeration   =    '(' S? Nmtoken (S? '|' S? Nmtoken)* S? ')';
	EnumeratedType =   NotationType | Enumeration;
	AttType       =    StringType | TokenizedType | EnumeratedType;
	
	CharRef       =    '&#' [0-9]+ $entity ';' @{subst_char(10);} | '&#x' [0-9a-fA-F]+ $entity ';' @{subst_char(16);};
	EntityRef     =    '&' NCName $entity ';';
	PEReference   =    '%' NCName $entity ';';
	
	extPS         =    (PEReference @{include_pe(true);})? S (PEReference @{include_pe(true);} S)*;
	PS            =    (extPS when {!m_internal_doctype}) | S;
		
	AttReference  =    CharRef | EntityRef @{if (subst_attr_entity()) fcall AttValueEnt;};
	DeclAttValue  =    '"' ((Char - [<&"]) | AttReference)*  '"' | "'" ((Char - [<&']) | AttReference)* "'";
	DefaultDecl   =    '#REQUIRED' | '#IMPLIED' | (('#FIXED' PS)? DeclAttValue);
	AttDef        =    PS (QName | NSAttName) PS AttType PS DefaultDecl;
	AttlistDecl_i :=   PS QName AttDef* PS? '>' @return;
	AttlistDecl   =    '<!ATTLIST' @{fcall AttlistDecl_i;};
	
	EVReference   =    CharRef | EntityRef @{bypass_entity();};
	PEVReference  =    PEReference @{if(subst_pentity()) fcall PEValue;};
	EntityValue   =    '"' ((Char - [%&"]) $append | PEVReference | EVReference)* '"' |  "'" ((Char - [%&']) $append | PEVReference | EVReference)* "'";
	NDataDecl     =    PS 'NDATA' PS NCName $entity;
	EntityDef     =    EntityValue | (ExternalID NDataDecl?);
	GEDecl        =    NCName $entity_name PS EntityDef PS? '>' @{general_entity();fret;};
	PEDef         =    EntityValue | ExternalID;
	PEDecl        =    '%' PS NCName $entity_name PS PEDef PS? '>' @{param_entity();fret;};
	EntityDecl_i :=    PS (GEDecl | PEDecl);
	EntityDecl    =    '<!ENTITY' @{fcall EntityDecl_i;};
	
	PublicID      =    'PUBLIC' S PubidLiteral;
	NotationDecl_i :=  PS NCName PS (ExternalID | PublicID) PS? '>' @return;
	NotationDecl  =    '<!NOTATION' @{fcall NotationDecl_i;};
	
	DeclSep       =    PEReference @{include_pe(false);fcall DeclSepEnt;} | S;   
	
	AttValue     :=    S? ('"' ((Char - [<&"]) $append | AttReference)* '"' | "'" ((Char - [<&']) $append | AttReference)* "'") @{TOKEN(AttributeValue);fret;};
	Attribute     =    (NSAttName | QName) $append S? '=' @{TOKEN(AttributeName);fcall AttValue;};
	
	CharData      =    ((Char - [<&])* -- ']]>') $append %{set_token(pe,Tokenizer::Text,0,false);};
	
	CDSect_i     :=    (Char* -- ']]>') $append ']]>' @{set_token(pe,Tokenizer::CData,2);fret;};
	CDSect        =    '<![CDATA[' @{fcall CDSect_i;};
	
	ch_or_seq     =    '(' @{fcall ch_or_seq1;};
	cp            =    (QName | ch_or_seq) ('?' | '*' | '+')?;
	choice        =    PS? cp ( PS? '|' PS? cp )+ PS?;
	seq           =    PS? cp ( PS? ',' PS? cp )* PS?;	
	ch_or_seq1   :=    (choice | seq) ')' @return;
	children      =    '(' PS? (choice | seq) ')' ('?' | '*' | '+')?;
	Mixed         =    '(' PS? '#PCDATA' ((PS? '|' PS? QName)* PS? ')*' | PS? ')');
	contentspec   =    'EMPTY' | 'ANY' | Mixed | children;
	elementdecl_i :=   PS QName PS contentspec PS? '>' @return;
	elementdecl   =    '<!ELEMENT' @{fcall elementdecl_i;};
	
	markupdecl    =    elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment;
	intSubset     =    (markupdecl | DeclSep)*;
	
	CReference    =    CharRef | EntityRef @{if(subst_content_entity()) fcall CParsedEnt;};	
	element       =    '<' QName $append %{TOKEN(ElementStart)} (S Attribute)* S? ('/>' @{TOKEN(ElementEnd)} | '>' @{fcall content_i;});
	content       =    CharData? ((element | CDSect | PI | Comment | CReference) CharData?)*;
	content_i    :=    content '</' QName $append S? '>' @{TOKEN(ElementEnd);fret;};    
	
	Ignore        =    Char* -- ('<![' | ']]>');
	ignoreSectContents = Ignore ('<![' @{fcall ignoreSectContents_i;} Ignore)*;
	ignoreSectContents_i := ignoreSectContents ']]>' @return;
	
	includeSect   =    'INCLUDE' PS? '[' @{fgoto includeSect_i;};
	ignoreSect    =    'IGNORE' PS? '[' ignoreSectContents ']]>' @return;
	
	conditionalSect =  '<![' @{fcall conditionalSect_i;};
	conditionalSect_i := PS? (includeSect | ignoreSect);
	extSubsetDecl =    (markupdecl | conditionalSect | DeclSep)*;
	includeSect_i :=   extSubsetDecl ']]>' @return;
			
	action ext_return { io_pop(); fret;}
	extSubset    :=    extSubsetDecl %{TOKEN(DocTypeEnd)} %ext_return;
	CParsedEnt   :=    content %ext_return;
	AttValueEnt  :=    ((Char - [<&]) $append | AttReference)* %ext_return;
	PEValue      :=    ((Char - [%&]) $append | PEVReference | EVReference)* %ext_return;
	DeclSepEnt   :=    extSubsetDecl %ext_return;
		
	intSubset_i  :=    intSubset ']' @return;
	
	doctypedecl   =    '<!DOCTYPE' S QName $append %{TOKEN(DocTypeStart)} (S ExternalID @{external_doctype();})? S? ('[' @{fcall intSubset_i;} S?)? '>' @{ if (do_doctype()) fcall extSubset; else {TOKEN(DocTypeEnd)}};
	prolog        =    Misc* (doctypedecl Misc*)?;
	document      =    prolog element Misc*;
 
	main := document;
}%%

#include "../src/Tokenizer.h"

// Ragel does silly things with signed and unsigned short
#define short unsigned short

%% write data;

void Tokenizer::do_init()
{
	%% write init;
}

Tokenizer::TokenType Tokenizer::next_token(OOBase::LocalString& strToken, int verbose)
{
	// Ragel variables
	Tokenizer&      p   = *this;
	const EndOfFile eof = EndOfFile();
	ParseState      pe(strToken);
			
	try
	{
		%% write exec;
		
		if (!pe.m_halt && m_cs >= %%{ write first_final; }%%)
			pe.m_type = Tokenizer::End;
			
		if (verbose >= 2)
			printf("m_cs=%d,t=%d,%s\n",m_cs,pe.m_type,strToken.c_str());
	}
	catch (const char* e)
	{
		if (verbose >= 1)
			printf("Exception %s\n",e);
	}
	
	return pe.m_type;
}
